version: '3.8'
services:
  ####################################
  # MySQL Database  
  ####################################
  database:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: example
    restart: always
    ports:
      - '3306:3306'
    expose:
      - 3306
    volumes:
      - db:/var/lib/mysql
      - ./database/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      interval: 10s
      timeout: 5s
      retries: 10

  ####################################
  # Employee microservice
  ####################################
  user:
    build:
      context: ./simple_microservice/employee
      dockerfile: Dockerfile
    environment:
      - MYSQL_HOST=database
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=example
    ports:
      - "5100:5100"
    depends_on:
      database:
          condition: service_healthy

  ####################################
  # Request microservice  
  ####################################

  request:
    build:
      context: ./simple_microservice/request
      dockerfile: Dockerfile
    environment:
      dbURL: mysql+mysqlconnector://root:example@database:3306/request
      PYTHONUNBUFFERED: 1
      RABBIT_URL: 'rabbitmq' 
    ports:
      - '5200:5200'
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:  
        condition: service_healthy


  ####################################
  # Notification microservice  
  ####################################
  notification:
    # restart: on-failure
    build:
      context: ./simple_microservice/notification
      dockerfile: Dockerfile
    environment:
      RABBIT_URL : 'amqp://rabbitmq'
      MAX_MINUTES_READY : 5
    depends_on:
      rabbitmq:
        condition: service_healthy

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    build: 
      context:  ./
      dockerfile: rabbit.Dockerfile
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db:
    driver: local
  rabbitmq_data:
  pgdata: